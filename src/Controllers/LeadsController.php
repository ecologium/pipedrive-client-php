<?php
/*
 * Pipedrive
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace Pipedrive\Controllers;

use Pipedrive\APIException;
use Pipedrive\APIHelper;
use Pipedrive\Configuration;
use Pipedrive\Models;
use Pipedrive\Exceptions;
use Pipedrive\Utils\DateTimeHelper;
use Pipedrive\Http\HttpRequest;
use Pipedrive\Http\HttpResponse;
use Pipedrive\Http\HttpMethod;
use Pipedrive\Http\HttpContext;
use Pipedrive\OAuthManager;
use Pipedrive\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class LeadsController extends BaseController
{
    /**
     * @var LeadsController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return LeadsController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }

        return static::$instance;
    }

    /**
     * Returns all leads.
     *
     * @param  array  $options    Array with all options for search
     * @param integer $options['ownerId']          (optional) ID of the user who will be marked as the owner of this
     *                                             lead. When omitted, the authorized user ID will be used.
     * @param string  $options['archivedStatus']  (optional) Filtering based on the archived status of a lead.
     *                                             If not provided, All is used.
     *                                             Supported values: archived, not_archived, all.
     * @param integer $options['start']            (optional) Pagination start
     * @param integer $options['limit']            (optional) Items shown per page
     * @param string  $options['sort']             (optional) Field names and sorting mode separated by a
     *                                             comma (field_name_1 ASC, field_name_2 DESC). Only first-
     *                                             level field keys are supported (no nested keys).
     *                                             Supported fields: id, title, owner_id, creator_id,
     *                                             was_seen, expected_close_date, next_activity_id, add_time, update_time.
     * @param integer $options['filterId']         (optional) ID of the filter to use
     *
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getAllLeads(
        $options
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //prepare query string for API call
        $_queryBuilder = '/leads';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'owner_id'        => $this->val($options, 'ownerId'),
            'filter_id'       => $this->val($options, 'filterId'),
            'archived_status' => $this->val($options, 'archivedStatus'),
			'organization_id' => $this->val($options, 'organization_id'),
            'start'           => $this->val($options, 'start', 0),
            'limit'           => $this->val($options, 'limit'),
            'sort'            => $this->val($options, 'sort'),
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'Pipedrive\\Models\\GetLeads');
    }

    /**
     * Adds a new lead. A lead always has to be linked to a person or an organization or both.
     * All leads created through the Pipedrive API will have a lead source API assigned.
     * Here's the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-lead" target="_blank"
     * rel="noopener noreferrer">adding a lead</a>.
     * If a lead contains custom fields, the fields' values will be included in the response
     * in the same format as with the Deals endpoints. If a custom field's value hasn't been set for the lead,
     * it won't appear in the response. Please note that leads do not have a separate set of custom fields,
     * instead they inherit the custom fields' structure from deals.
     * See an example given in the <a href="https://pipedrive.readme.io/docs/updating-custom-field-value"
     * target="_blank" rel="noopener noreferrer">updating custom fields' values tutorial</a>.
     *
     * @param object $body (optional) may have following parameters
     * 'title'               The name of the lead.
     * 'owner_id'            (optional) The ID of the user which will be the owner of the created lead.
     *                       If not provided, the user making the request will be used.
     * 'person_id'           (optional) The ID of a person which this lead will be linked to.
     *                       If the person does not exist yet, it needs to be created first.
     *                       This property is required unless organization_id is specified.
     * 'organization_id'     The ID of an organization which this lead will be linked to.
     *                       If the organization does not exist yet, it needs to be created first.
     *                       This property is required unless person_id is specified.
     * 'label_ids'           (optional) The IDs of the lead labels which will be associated with the lead.
     * 'value'               (optional) The potential value of the lead.
     * 'expected_close_date' (optional) The date of when the deal which will be created from the lead
     *                       is expected to be closed.
     * 'visible_to'          (optional) The visibility of the lead. If omitted, the visibility will be set
     *                       to the default visibility setting of this item type for the authorized
     *                       user. Possible values: 1 3 5 7.
     * 'was_seen'            (optional) A flag indicating whether the lead was seen by someone
     *                       in the Pipedrive UI.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function addALead(
        $body = null
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //prepare query string for API call
        $_queryBuilder = '/leads';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //json encode body
        $_bodyJson = Request\Body::Json($body);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, $_bodyJson);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'Pipedrive\\Models\\PostLead');
    }

    /**
     * Deletes a specific lead.
     *
     * @param string $id ID of the lead
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteALead(
        $id
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //prepare query string for API call
        $_queryBuilder = '/leads/{id}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'id' => $id,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'Pipedrive\\Models\\DeleteLead');
    }

    /**
     * Returns details about a specific lead.
     *
     * @param integer $id ID of the lead
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getOneLead(
        $id
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //prepare query string for API call
        $_queryBuilder = '/leads/{id}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'id' => $id,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'Pipedrive\\Models\\PostLead');
    }

    /**
     * Updates a lead.
     *
     * @param  array  $options    Array with all options for search
     * @param string  $options['id']                          ID of the lead
     * @param string  $options['title']             The name of the lead.
     * @param integer $options['ownerId']           (optional) The ID of the user which will be the owner of the created
     *                                              lead.
     *                                              If not provided, the user making the request will be used.
     * @param integer $options['personId']          (optional) The ID of a person which this lead will be linked to.
     *                                              If the person does not exist yet, it needs to be created first.
     *                                              This property is required unless organization_id is specified.
     * @param integer $options['organizationId']             The ID of an organization which this lead will be linked to.
     *                                              If the organization does not exist yet, it needs to be created first.
     *                                              This property is required unless person_id is specified.
     * @param array   $options['labelIds']          (optional) The IDs of the lead labels which will be associated with the lead.
     * @param boolean $options['isArchived']        (optional) A flag indicating whether the lead is archived or not.
     * @param object  $options['value']             (optional) The potential value of the lead.
     * @param string  $options['expectedCloseDate'] (optional) The date of when the deal which will be created from the lead
     *                                              is expected to be closed.
     * @param string  $options['visibleTo']         (optional) The visibility of the lead. If omitted, the visibility will be set
     *                                              to the default visibility setting of this item type for the authorized
     *                                              user. Possible values: 1 3 5 7.
     * @param boolean $options['wasSeen']           (optional) A flag indicating whether the lead was seen by someone
     *                                              in the Pipedrive UI.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateALead(
        $options
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //prepare query string for API call
        $_queryBuilder = '/leads/{id}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'id'                          => $this->val($options, 'id'),
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'                => BaseController::USER_AGENT,
            'Accept'                    => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //prepare parameters
        $_parameters = array (
            'title'               => $this->val($options, 'title'),
            'owner_id'            => $this->val($options, 'ownerId'),
            'person_id'           => $this->val($options, 'personId'),
            'organization_id'     => $this->val($options, 'organizationId'),
            'label_ids'           => $this->val($options, 'labelIds'),
            'is_archived'           => $this->val($options, 'isArchived'),
            'value'               => APIHelper::prepareFormFields($this->val($options, 'value')),
            'expected_close_date' => DateTimeHelper::toSimpleDate($this->val($options, 'expectedCloseDate')),
            'visible_to'          => APIHelper::prepareFormFields($this->val($options, 'visibleTo')),
            'was_seen'            => APIHelper::prepareFormFields($this->val($options, 'wasSeen'))
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PATCH, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'Pipedrive\\Models\\PostLead');
    }


    /**
    * Array access utility method
     * @param  array          $arr         Array of values to read from
     * @param  string         $key         Key to get the value from the array
     * @param  mixed|null     $default     Default value to use if the key was not found
     * @return mixed
     */
    private function val($arr, $key, $default = null)
    {
        if (isset($arr[$key])) {
            return is_bool($arr[$key]) ? var_export($arr[$key], true) : $arr[$key];
        }
        return $default;
    }
}
